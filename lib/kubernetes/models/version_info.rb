=begin
#Kubernetes

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1.13.4

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require 'date'

module Kubernetes
  # Info contains versioning information. how we'll want to distribute that information.
  class VersionInfo
    attr_accessor :build_date

    attr_accessor :compiler

    attr_accessor :git_commit

    attr_accessor :git_tree_state

    attr_accessor :git_version

    attr_accessor :go_version

    attr_accessor :major

    attr_accessor :minor

    attr_accessor :platform


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'build_date' => :'buildDate',
        :'compiler' => :'compiler',
        :'git_commit' => :'gitCommit',
        :'git_tree_state' => :'gitTreeState',
        :'git_version' => :'gitVersion',
        :'go_version' => :'goVersion',
        :'major' => :'major',
        :'minor' => :'minor',
        :'platform' => :'platform'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'build_date' => :'String',
        :'compiler' => :'String',
        :'git_commit' => :'String',
        :'git_tree_state' => :'String',
        :'git_version' => :'String',
        :'go_version' => :'String',
        :'major' => :'String',
        :'minor' => :'String',
        :'platform' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'buildDate')
        self.build_date = attributes[:'buildDate']
      end

      if attributes.has_key?(:'compiler')
        self.compiler = attributes[:'compiler']
      end

      if attributes.has_key?(:'gitCommit')
        self.git_commit = attributes[:'gitCommit']
      end

      if attributes.has_key?(:'gitTreeState')
        self.git_tree_state = attributes[:'gitTreeState']
      end

      if attributes.has_key?(:'gitVersion')
        self.git_version = attributes[:'gitVersion']
      end

      if attributes.has_key?(:'goVersion')
        self.go_version = attributes[:'goVersion']
      end

      if attributes.has_key?(:'major')
        self.major = attributes[:'major']
      end

      if attributes.has_key?(:'minor')
        self.minor = attributes[:'minor']
      end

      if attributes.has_key?(:'platform')
        self.platform = attributes[:'platform']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @build_date.nil?
        invalid_properties.push("invalid value for 'build_date', build_date cannot be nil.")
      end

      if @compiler.nil?
        invalid_properties.push("invalid value for 'compiler', compiler cannot be nil.")
      end

      if @git_commit.nil?
        invalid_properties.push("invalid value for 'git_commit', git_commit cannot be nil.")
      end

      if @git_tree_state.nil?
        invalid_properties.push("invalid value for 'git_tree_state', git_tree_state cannot be nil.")
      end

      if @git_version.nil?
        invalid_properties.push("invalid value for 'git_version', git_version cannot be nil.")
      end

      if @go_version.nil?
        invalid_properties.push("invalid value for 'go_version', go_version cannot be nil.")
      end

      if @major.nil?
        invalid_properties.push("invalid value for 'major', major cannot be nil.")
      end

      if @minor.nil?
        invalid_properties.push("invalid value for 'minor', minor cannot be nil.")
      end

      if @platform.nil?
        invalid_properties.push("invalid value for 'platform', platform cannot be nil.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @build_date.nil?
      return false if @compiler.nil?
      return false if @git_commit.nil?
      return false if @git_tree_state.nil?
      return false if @git_version.nil?
      return false if @go_version.nil?
      return false if @major.nil?
      return false if @minor.nil?
      return false if @platform.nil?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          build_date == o.build_date &&
          compiler == o.compiler &&
          git_commit == o.git_commit &&
          git_tree_state == o.git_tree_state &&
          git_version == o.git_version &&
          go_version == o.go_version &&
          major == o.major &&
          minor == o.minor &&
          platform == o.platform
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [build_date, compiler, git_commit, git_tree_state, git_version, go_version, major, minor, platform].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Kubernetes.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
