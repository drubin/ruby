=begin
#Kubernetes

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1.13.4

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require 'date'

module Kubernetes
  # StatefulSetStatus represents the current state of a StatefulSet.
  class V1beta2StatefulSetStatus
    # collisionCount is the count of hash collisions for the StatefulSet. The StatefulSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
    attr_accessor :collision_count

    # Represents the latest available observations of a statefulset's current state.
    attr_accessor :conditions

    # currentReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by currentRevision.
    attr_accessor :current_replicas

    # currentRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [0,currentReplicas).
    attr_accessor :current_revision

    # observedGeneration is the most recent generation observed for this StatefulSet. It corresponds to the StatefulSet's generation, which is updated on mutation by the API Server.
    attr_accessor :observed_generation

    # readyReplicas is the number of Pods created by the StatefulSet controller that have a Ready Condition.
    attr_accessor :ready_replicas

    # replicas is the number of Pods created by the StatefulSet controller.
    attr_accessor :replicas

    # updateRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [replicas-updatedReplicas,replicas)
    attr_accessor :update_revision

    # updatedReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by updateRevision.
    attr_accessor :updated_replicas


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'collision_count' => :'collisionCount',
        :'conditions' => :'conditions',
        :'current_replicas' => :'currentReplicas',
        :'current_revision' => :'currentRevision',
        :'observed_generation' => :'observedGeneration',
        :'ready_replicas' => :'readyReplicas',
        :'replicas' => :'replicas',
        :'update_revision' => :'updateRevision',
        :'updated_replicas' => :'updatedReplicas'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'collision_count' => :'Integer',
        :'conditions' => :'Array<V1beta2StatefulSetCondition>',
        :'current_replicas' => :'Integer',
        :'current_revision' => :'String',
        :'observed_generation' => :'Integer',
        :'ready_replicas' => :'Integer',
        :'replicas' => :'Integer',
        :'update_revision' => :'String',
        :'updated_replicas' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'collisionCount')
        self.collision_count = attributes[:'collisionCount']
      end

      if attributes.has_key?(:'conditions')
        if (value = attributes[:'conditions']).is_a?(Array)
          self.conditions = value
        end
      end

      if attributes.has_key?(:'currentReplicas')
        self.current_replicas = attributes[:'currentReplicas']
      end

      if attributes.has_key?(:'currentRevision')
        self.current_revision = attributes[:'currentRevision']
      end

      if attributes.has_key?(:'observedGeneration')
        self.observed_generation = attributes[:'observedGeneration']
      end

      if attributes.has_key?(:'readyReplicas')
        self.ready_replicas = attributes[:'readyReplicas']
      end

      if attributes.has_key?(:'replicas')
        self.replicas = attributes[:'replicas']
      end

      if attributes.has_key?(:'updateRevision')
        self.update_revision = attributes[:'updateRevision']
      end

      if attributes.has_key?(:'updatedReplicas')
        self.updated_replicas = attributes[:'updatedReplicas']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @replicas.nil?
        invalid_properties.push("invalid value for 'replicas', replicas cannot be nil.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @replicas.nil?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          collision_count == o.collision_count &&
          conditions == o.conditions &&
          current_replicas == o.current_replicas &&
          current_revision == o.current_revision &&
          observed_generation == o.observed_generation &&
          ready_replicas == o.ready_replicas &&
          replicas == o.replicas &&
          update_revision == o.update_revision &&
          updated_replicas == o.updated_replicas
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [collision_count, conditions, current_replicas, current_revision, observed_generation, ready_replicas, replicas, update_revision, updated_replicas].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Kubernetes.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
