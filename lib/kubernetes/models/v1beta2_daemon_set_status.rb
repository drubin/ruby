=begin
#Kubernetes

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1.13.4

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require 'date'

module Kubernetes
  # DaemonSetStatus represents the current status of a daemon set.
  class V1beta2DaemonSetStatus
    # Count of hash collisions for the DaemonSet. The DaemonSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
    attr_accessor :collision_count

    # Represents the latest available observations of a DaemonSet's current state.
    attr_accessor :conditions

    # The number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
    attr_accessor :current_number_scheduled

    # The total number of nodes that should be running the daemon pod (including nodes correctly running the daemon pod). More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
    attr_accessor :desired_number_scheduled

    # The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and available (ready for at least spec.minReadySeconds)
    attr_accessor :number_available

    # The number of nodes that are running the daemon pod, but are not supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
    attr_accessor :number_misscheduled

    # The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and ready.
    attr_accessor :number_ready

    # The number of nodes that should be running the daemon pod and have none of the daemon pod running and available (ready for at least spec.minReadySeconds)
    attr_accessor :number_unavailable

    # The most recent generation observed by the daemon set controller.
    attr_accessor :observed_generation

    # The total number of nodes that are running updated daemon pod
    attr_accessor :updated_number_scheduled


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'collision_count' => :'collisionCount',
        :'conditions' => :'conditions',
        :'current_number_scheduled' => :'currentNumberScheduled',
        :'desired_number_scheduled' => :'desiredNumberScheduled',
        :'number_available' => :'numberAvailable',
        :'number_misscheduled' => :'numberMisscheduled',
        :'number_ready' => :'numberReady',
        :'number_unavailable' => :'numberUnavailable',
        :'observed_generation' => :'observedGeneration',
        :'updated_number_scheduled' => :'updatedNumberScheduled'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'collision_count' => :'Integer',
        :'conditions' => :'Array<V1beta2DaemonSetCondition>',
        :'current_number_scheduled' => :'Integer',
        :'desired_number_scheduled' => :'Integer',
        :'number_available' => :'Integer',
        :'number_misscheduled' => :'Integer',
        :'number_ready' => :'Integer',
        :'number_unavailable' => :'Integer',
        :'observed_generation' => :'Integer',
        :'updated_number_scheduled' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'collisionCount')
        self.collision_count = attributes[:'collisionCount']
      end

      if attributes.has_key?(:'conditions')
        if (value = attributes[:'conditions']).is_a?(Array)
          self.conditions = value
        end
      end

      if attributes.has_key?(:'currentNumberScheduled')
        self.current_number_scheduled = attributes[:'currentNumberScheduled']
      end

      if attributes.has_key?(:'desiredNumberScheduled')
        self.desired_number_scheduled = attributes[:'desiredNumberScheduled']
      end

      if attributes.has_key?(:'numberAvailable')
        self.number_available = attributes[:'numberAvailable']
      end

      if attributes.has_key?(:'numberMisscheduled')
        self.number_misscheduled = attributes[:'numberMisscheduled']
      end

      if attributes.has_key?(:'numberReady')
        self.number_ready = attributes[:'numberReady']
      end

      if attributes.has_key?(:'numberUnavailable')
        self.number_unavailable = attributes[:'numberUnavailable']
      end

      if attributes.has_key?(:'observedGeneration')
        self.observed_generation = attributes[:'observedGeneration']
      end

      if attributes.has_key?(:'updatedNumberScheduled')
        self.updated_number_scheduled = attributes[:'updatedNumberScheduled']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @current_number_scheduled.nil?
        invalid_properties.push("invalid value for 'current_number_scheduled', current_number_scheduled cannot be nil.")
      end

      if @desired_number_scheduled.nil?
        invalid_properties.push("invalid value for 'desired_number_scheduled', desired_number_scheduled cannot be nil.")
      end

      if @number_misscheduled.nil?
        invalid_properties.push("invalid value for 'number_misscheduled', number_misscheduled cannot be nil.")
      end

      if @number_ready.nil?
        invalid_properties.push("invalid value for 'number_ready', number_ready cannot be nil.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @current_number_scheduled.nil?
      return false if @desired_number_scheduled.nil?
      return false if @number_misscheduled.nil?
      return false if @number_ready.nil?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          collision_count == o.collision_count &&
          conditions == o.conditions &&
          current_number_scheduled == o.current_number_scheduled &&
          desired_number_scheduled == o.desired_number_scheduled &&
          number_available == o.number_available &&
          number_misscheduled == o.number_misscheduled &&
          number_ready == o.number_ready &&
          number_unavailable == o.number_unavailable &&
          observed_generation == o.observed_generation &&
          updated_number_scheduled == o.updated_number_scheduled
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [collision_count, conditions, current_number_scheduled, desired_number_scheduled, number_available, number_misscheduled, number_ready, number_unavailable, observed_generation, updated_number_scheduled].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Kubernetes.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
